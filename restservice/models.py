from django.db import models
# from django.utils import timezone
import pytz

TIMEZONES = tuple(zip(pytz.all_timezones, pytz.all_timezones))


class Users(models.Model):
    user_id = models.CharField(max_length=20, primary_key=True)
    name = models.CharField(max_length=150, unique=True)
    serving_size = models.IntegerField(default=100)
    streak = models.IntegerField()
    score = models.IntegerField()
    timezone = models.CharField(max_length=32, choices=TIMEZONES, default='EST')

    def __str__(self):
        return "{} has a score of {}, and has a streak of {}".format(self.name, self.score, self.streak)


class Goals(models.Model):
    goal_id = models.CharField(max_length=32, primary_key=True)
    user_id = models.ForeignKey("Users", on_delete=models.CASCADE)
    water_ml = models.IntegerField()
    protein_grams = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    kilocalories = models.IntegerField()

    def __str__(self):
        return "carbs: {}\nprotein: {}\nfat: {}\n kilocalories: {}".format(
            self.carb_grams,
            self.protein_grams,
            self.fat_grams,
            self.kilocalories
        )


class MealEntry(models.Model):
    meal_entry_id = models.IntegerField(primary_key=True)
    user_id = models.ForeignKey("Users", on_delete=models.CASCADE)
    meal_name = models.CharField(max_length=100)
    time_of_creation = models.DateTimeField()
    kilocalories = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    protein_grams = models.IntegerField()

    def __str__(self):
        return "meal name: {}\ncarbs: {}\nprotein: {}\nfat: {}\n kilocalories: {}".format(
            self.meal_name,
            self.carb_grams,
            self.protein_grams,
            self.fat_grams,
            self.kilocalories
        )


class FoodEntry(models.Model):
    food_entry_id = models.IntegerField(primary_key=True)
    time_of_creation = models.DateTimeField()
    user_id = models.ForeignKey("Users", on_delete=models.CASCADE)
    food_name = models.CharField(max_length=100, blank=True, null=True)
    kilocalories = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    protein_grams = models.IntegerField()

    def __str__(self):
        return "food name: {}\ncarbs: {}\nprotein: {}\nfat: {}\n kilocalories: {}".format(
            self.food_name,
            self.carb_grams,
            self.protein_grams,
            self.fat_grams,
            self.kilocalories
        )


class DailyFood(models.Model):
    day_id = models.IntegerField(primary_key=True)
    time_of_creation = models.DateTimeField()
    user_id = models.ForeignKey("Users", on_delete=models.CASCADE)
    # One of the following two has to not be None!
    food_entry_id = models.ForeignKey("FoodEntry", on_delete=models.CASCADE, blank=True, null=True)
    meal_id = models.ForeignKey("MealEntry", on_delete=models.CASCADE, blank=True, null=True)


class FoodCache(models.Model):
    """
    THIS MODEL WAS NOT A PART OF THE ORIGINAL SCHEMA DESIGN.
    However, it does help us out a lot by making JSON serialization much easier.
    It also occasionally saves us time by bypassing the need to make Nutritics API calls.
    Ask Dash for more details.
    """
    # Hash is generated by calling the md5_hash_string() function on the food's name
    food_hash = models.CharField(primary_key=True, max_length=32)
    food_name = models.CharField(max_length=100)
    # All these measurements are ALWAYS per 100 grams of food
    kilocalories = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    protein_grams = models.IntegerField()
