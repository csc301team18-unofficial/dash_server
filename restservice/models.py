from django.db import models

from utility.utilconstants import TIMEZONES


class Users(models.Model):
    user_id = models.CharField(max_length=100, primary_key=True)
    name = models.CharField(max_length=100, unique=True)
    serving_size = models.IntegerField(default=100)
    streak = models.IntegerField()
    score = models.IntegerField()
    last_checkin = models.IntegerField()
    timezone = models.CharField(max_length=32, choices=TIMEZONES, default='EST')

    def __str__(self):
        return self.user_id


class Goals(models.Model):
    goal_id = models.CharField(max_length=32, primary_key=True)
    user_id = models.ForeignKey("Users", on_delete=models.CASCADE)
    water_ml = models.IntegerField()
    protein_grams = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    kilocalories = models.IntegerField()

    def __str__(self):
        return "water_ml: {}\ncarbs: {}\nprotein: {}\nfat: {}\nkilocalories: {}".format(
            self.water_ml,
            self.carb_grams,
            self.protein_grams,
            self.fat_grams,
            self.kilocalories
        )


class Entry(models.Model):
    """
    Each entry is one thing that user user_id ate, with the nutrition data
    scaled to the appropriate amounts, given the user's portion size.
    """
    entry_id = models.IntegerField(primary_key=True)
    time_of_creation = models.DateTimeField()
    user_id = models.ForeignKey("Users", on_delete=models.CASCADE)
    food_name = models.CharField(max_length=100, blank=True, null=True)
    meal_id = models.IntegerField(primary_key=True, null=True)
    kilocalories = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    protein_grams = models.IntegerField()
    water_ml = models.IntegerField(null=True)

    def __str__(self):
        return self.entry_id


class MealCache(models.Model):
    """
    Nutrition data for meals that the user creates.

    """
    # ID is generated from the MD5 hash of the meal's name concatenated with the user_id
    meal_id = models.CharField(primary_key=True, max_length=32)
    meal_name = models.CharField(max_length=100)
    user_id = models.ForeignKey("Users", on_delete=models.CASCADE)
    kilocalories = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    protein_grams = models.IntegerField()

    def __str__(self):
        return self.meal_id


class FoodCache(models.Model):

    # Hash is generated by calling the md5_hash_string() function on the food's name
    food_hash = models.CharField(primary_key=True, max_length=32)
    food_name = models.CharField(max_length=100)
    # All these measurements are ALWAYS per 100 grams of food
    kilocalories = models.IntegerField()
    fat_grams = models.IntegerField()
    carb_grams = models.IntegerField()
    protein_grams = models.IntegerField()

    def __str__(self):
        return self.food_hash
